package objectcollection;

import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;

import object.Class;
import object.Student;

public class ClassStudent {
	private Class classO;
	private LinkedList<Student> listStudent;
	private TreeMap<Class, LinkedList<Student>> mapClass = new TreeMap<Class, LinkedList<Student>>();

	public ClassStudent() {
		this.classO= new Class();
		this.listStudent = new LinkedList<Student>();
		this.mapClass = new TreeMap<Class, LinkedList<Student>>();
	}

	public ClassStudent(Class classO, LinkedList<Student> listStudent) {
		this.classO = classO;
		this.listStudent = listStudent;
		this.mapClass.put(classO, listStudent);
	}

	public Class getClassO() {
		return classO;
	}

	public void setClassO(Class classO) {
		this.classO = classO;
	}

	public LinkedList<Student> getListStudent() {
		return listStudent;
	}

	public void setListStudent(LinkedList<Student> listStudent) {
		this.listStudent = listStudent;
	}

	public TreeMap<Class, LinkedList<Student>> getMapClass() {
		return mapClass;
	}

	public void setMapClass(TreeMap<Class, LinkedList<Student>> mapClass) {
		this.mapClass = mapClass;
	}

	@Override
	public String toString() {
		String resuft = "";
		for (int i = 0; i < this.listStudent.size(); i++) {
			resuft += this.classO.toString() + listStudent.get(i)+"|\n";

		}
		return resuft;
	}
	public void loadListStudent() {
		for (Student student : this.listStudent) {
			System.out.println(student);
		}
	}
	

	public void searchStudent(String name) {
		int cout = 0;
		for (Student student : this.listStudent) {
			if (student.getFullName().indexOf(name) >= 0) {
				System.out.println(student);
				cout++;
			}
		}
		if (cout == 0) {
			System.out.println("Haven't student name: " + name);
		}
	}
	
	public void sortStudentScoreDEC() {
		Collections.sort(this.listStudent);
		
		Collections.sort(this.listStudent, new Comparator<Student>() {

			@Override
			public int compare(Student student1, Student student2) {
				if (student1.getScore() < student2.getScore()) {
					return 1;
				} else if (student1.getScore() > student2.getScore()) {
					return -1;
				} else {
					return 0;
				}

			}
		});
	}

	public void sortStudentScoreASC() {
		Collections.sort(this.listStudent, new Comparator<Student>() {
			@Override
			public int compare(Student student1, Student student2) {
				if (student1.getScore() < student2.getScore()) {
					return -1;
				} else if (student1.getScore() > student2.getScore()) {
					return 1;
				} else {
					return 0;
				}
			}
		});
	}

	public void sortStudentNameASC() {
		Collections.sort(this.listStudent, new Comparator<Student>() {
			@Override
			public int compare(Student student1, Student student2) {
				String nameThis = student1.getName();
				String nameO = student2.getName();
				return nameThis.compareTo(nameO);
			}
		});
	}

	public void sortStudentNameDEC() {
		Collections.sort(this.listStudent, new Comparator<Student>() {
			@Override
			public int compare(Student student1, Student student2) {
				String nameThis = student1.getName();
				String nameO = student2.getName();
				return nameO.compareTo(nameThis);
			}
		});
	}
}
