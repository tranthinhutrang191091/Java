package objectcollection;

import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import object.Class;
import object.Student;

public class ClassStudent {
	private Class classO;
	private LinkedList<StudentSubject> stuSubjcet;
	private TreeMap<Class, LinkedList> mapClassStudent = new TreeMap<Class, LinkedList>();

	public ClassStudent() {
		this.classO= new Class();
		this.stuSubjcet = new LinkedList<StudentSubject>();
		this.mapClassStudent = new TreeMap<Class,LinkedList>();
	}
	
	public ClassStudent(Class classO, LinkedList<StudentSubject> stuSubjcet) {
		
		this.classO = classO;
		this.stuSubjcet = stuSubjcet;
		this.mapClassStudent.put(classO, stuSubjcet);
	}

	public Class getClassO() {
		return classO;
	}

	public void setClassO(Class classO) {
		this.classO = classO;
	}

	public LinkedList<StudentSubject>  getStuSubjcet() {
		return stuSubjcet;
	}

	public void setStuSubjcet(LinkedList<StudentSubject> stuSubjcet) {
		this.stuSubjcet = stuSubjcet;
	}

	public TreeMap getMapClassStudent() {
		return mapClassStudent;
	}

	public void setMapClassStudent(TreeMap mapClassStudent) {
		this.mapClassStudent = mapClassStudent;
	}



	@Override
	public String toString() {
		String result="";
		Set<Class> setClass= this.mapClassStudent.keySet();
		for (Class key : setClass) {
			result+=key + "|" + this.mapClassStudent.get(key);
		}
		return result;
	}

	/*
	public void searchStudent(String name) {
		int cout = 0;
		for (Student student : this.listStudent) {
			if (student.getFullName().indexOf(name) >= 0) {
				System.out.println(student);
				cout++;
			}
		}
		if (cout == 0) {
			System.out.println("Haven't student name: " + name);
		}
	}
	
	public void sortStudentScoreDEC() {
		Collections.sort(this.listStudent);
		
		Collections.sort(this.listStudent, new Comparator<Student>() {

			@Override
			public int compare(Student student1, Student student2) {
				if (student1.getScore() < student2.getScore()) {
					return 1;
				} else if (student1.getScore() > student2.getScore()) {
					return -1;
				} else {
					return 0;
				}

			}
		});
	}

	public void sortStudentScoreASC() {
		Collections.sort(this.listStudent, new Comparator<Student>() {
			@Override
			public int compare(Student student1, Student student2) {
				if (student1.getScore() < student2.getScore()) {
					return -1;
				} else if (student1.getScore() > student2.getScore()) {
					return 1;
				} else {
					return 0;
				}
			}
		});
	}

	public void sortStudentNameASC() {
		Collections.sort(this.listStudent, new Comparator<Student>() {
			@Override
			public int compare(Student student1, Student student2) {
				String nameThis = student1.getName();
				String nameO = student2.getName();
				return nameThis.compareTo(nameO);
			}
		});
	}

	public void sortStudentNameDEC() {
		Collections.sort(this.listStudent, new Comparator<Student>() {
			@Override
			public int compare(Student student1, Student student2) {
				String nameThis = student1.getName();
				String nameO = student2.getName();
				return nameO.compareTo(nameThis);
			}
		});
	}
	*/
}
